import React, { useState } from 'react';
import { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';
import { format } from 'date-fns';
import * as Yup from 'yup';
import '../DishForm.css';
import 'bootstrap/dist/css/bootstrap.min.css';

interface DishFormData {
    name: string;
    preparation_time: string;
    type: string;
    no_of_slices?: number;
    diameter?: number;
    spiciness_scale?: number;
    slices_of_bread?: number;
}

const DishForm: React.FC = () => {
    const initialValues: DishFormData = {
        name: '',
        preparation_time: '',
        type: '',
        no_of_slices: 1,
        diameter: 1,
        spiciness_scale: 1,
        slices_of_bread: 1,
    };

    const [submissionStatus, setSubmissionStatus] = useState<
        'idle' | 'pending' | 'success' | 'error'
        >('idle');

    const handleSubmit = async (values: DishFormData) => {
        setSubmissionStatus('pending');

        try {
            const formattedValues: DishFormData = {
                name: values.name,
                preparation_time: format(
                    new Date(`2000-01-01T${values.preparation_time}`),
                    'HH:mm:ss'
                ),
                type: values.type,
            };

            if (values.type === 'pizza') {
                formattedValues.no_of_slices = values.no_of_slices;
                formattedValues.diameter = values.diameter;
            } else if (values.type === 'soup') {
                formattedValues.spiciness_scale = values.spiciness_scale;
            } else if (values.type === 'sandwich') {
                formattedValues.slices_of_bread = values.slices_of_bread;
            }

            const response = await fetch(
                'https://umzzcc503l.execute-api.us-west-2.amazonaws.com/dishes/',
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formattedValues),
                }
            );

            if (!response.ok) {
                const data = await response.json();
                console.log('Validation errors:', data);
                setSubmissionStatus('error');
            } else {
                const data = await response.json();
                console.log('Success:', data);
                setSubmissionStatus('success');
            }
        } catch (error) {
            console.error('Error:', error);
            setSubmissionStatus('error');
        }
    };

    const ConditionalFields: React.FC = () => {
        const { values } = useFormikContext<DishFormData>();

        if (values.type === 'pizza') {
            return (
                <>
                    <div>
                        <label htmlFor="no_of_slices">Number of Slices:</label>
                        <Field type="number" id="no_of_slices" name="no_of_slices" />
                        <div className="error">
                            <ErrorMessage name="no_of_slices" component="div" />
                        </div>
                    </div>
                    <div>
                        <label htmlFor="diameter">Diameter:</label>
                        <Field type="number" id="diameter" name="diameter" />
                        <div className="error">
                            <ErrorMessage name="diameter" component="div" />
                        </div>
                    </div>
                </>
            );
        }

        if (values.type === 'soup') {
            return (
                <div>
                    <label htmlFor="spiciness_scale">Spiciness Scale:</label>
                    <Field type="number" id="spiciness_scale" name="spiciness_scale" />
                    <div className="error">
                        <ErrorMessage name="spiciness_scale" component="div" />
                    </div>
                </div>
            );
        }

        if (values.type === 'sandwich') {
            return (
                <div>
                    <label htmlFor="slices_of_bread">Slices of Bread:</label>
                    <Field type="number" id="slices_of_bread" name="slices_of_bread" />
                    <div className="error">
                        <ErrorMessage name="slices_of_bread" component="div" />
                    </div>
                </div>
            );
        }

        return null;
    };

    const validationSchema = Yup.object().shape({
        name: Yup.string()
            .required('Name is required')
            .min(3, 'Name has to be at least 3 characters long'),
        preparation_time: Yup.string().required('Preparation Time is required'),
        type: Yup.string().required('Type is required'),
        // no_of_slices: Yup.number().when('type', {
        //     is: 'pizza',
        //     then: Yup.number()
        //         .required('Number of Slices is required')
        //         .min(1, 'Number of Slices must be greater than 0')
        // }),
        // diameter: Yup.number().when('type', {
        //     is: 'pizza',
        //     then: Yup.number()
        //         .required('Diameter is required')
        //         .min(1, 'Diameter must be greater than 0')
        // }),
        // spiciness_scale: Yup.number().when('type', {
        //     is: 'soup',
        //     then: Yup.number()
        //         .required('Spiciness Scale is required')
        //         .min(1, 'Spiciness Scale must be greater than 0')
        // }),
        // slices_of_bread: Yup.number().when('type', {
        //     is: 'sandwich',
        //     then: Yup.number()
        //         .required('Slices of Bread is required')
        //         .min(1, 'Slices of Bread must be greater than 0')
        // })
    });

    const renderSubmissionMessage = () => {
        if (submissionStatus === 'pending') {
            return <div>Submitting form...</div>;
        } else if (submissionStatus === 'success') {
            return <div>Form submitted successfully!</div>;
        } else if (submissionStatus === 'error') {
            return (
                <div className="error">Something went wrong :/</div>
            );
        }

        return null;
    };

    return (
        <div className="form-container">
            <Formik
                initialValues={initialValues}
                validationSchema={validationSchema}
                onSubmit={handleSubmit}
            >
                <Form className="form">
                    <div className="form-group">
                        <label htmlFor="name">Name:</label>
                        <Field type="text" id="name" name="name" className="form-control" />
                        <div className="error">
                            <ErrorMessage name="name" component="div" />
                        </div>
                    </div>
                    <div className="form-group">
                        <label htmlFor="preparation_time">Preparation Time:</label>
                        <Field
                            type="time"
                            id="preparation_time"
                            name="preparation_time"
                            className="form-control"
                        />
                        <div className="error">
                            <ErrorMessage name="preparation_time" component="div" />
                        </div>
                    </div>
                    <div className="form-group">
                        <label htmlFor="type">Type:</label>
                        <Field as="select" id="type" name="type" className="form-control">
                            <option value="">Select a type</option>
                            <option value="pizza">Pizza</option>
                            <option value="soup">Soup</option>
                            <option value="sandwich">Sandwich</option>
                        </Field>
                        <div className="error">
                            <ErrorMessage name="type" component="div" />
                        </div>
                    </div>
                    <ConditionalFields />
                    <button type="submit" className="btn btn-primary">
                        Submit
                    </button>
                    {renderSubmissionMessage()}
                </Form>
            </Formik>
        </div>
    );
};

export default DishForm;
